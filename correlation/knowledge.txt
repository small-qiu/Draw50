## o新知识点一 0102

1.plt.scatter()

2.plt.cm.tab10(5.2)

3.np.array(color1).reshape(1,-1)  # 行数变为一

4.colors = [plt.cm.tab10(i/float(len(categories)-1)) for i in range(len(categories))]

5.
plt.rcParams # 默认内容
plt.style.use('seaborn-whitegrid') # 风格
sns.set_style("white") # 底色

6.plt.scatter('area', 'poptotal', data=……,）   # 简化

7.data.iloc[:,-3:] = OE().fit_transform(data.iloc[:,-3:]) # 标签转换为数字

8.data.info()

9.data = data.loc[:,data.dtypes.values != "O"]

10.coeff.sort_values(by="mean",ascending=False)

11.plt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),xlabel='Area', ylabel='Population')

12.p = np.c_[x,y] #.c_功能类似于zip，不过不是生成组合的元祖，而是生成拼接起来的数组array

13.hull = ConvexHull(p) #将数据集输入到ConvexHull中，自动生成凸包类型的对象,点集

14.ax.add_patch(poly) #使用add_patch，将生成的多边形作为一个补丁补充到图像上

15.plt.text()函数一次只能标注一个位置的文本~~~


## o新知识点二 030405

1.gridobj =sns.lmplot(……,legend=False   #点)  gridobj.set()

2.plt.legend(["类别0","类别1"])  #线

3.[*zip(df.columns.values,np.array(name))]

4.df.loc[df.cyl.isin([4,8]),:].head()  #为4和为8

5.df.cyl.value_counts()

6.sns.stripplot( , jitter=0.25 #抖动的幅度，不能太多不能太小)

7.df_counts = df.groupby(['hwy', 'cty']).size().reset_index(name="counts") 


## o新知识点三 0607

1.fig = plt.figure(figsize=(16, 10), dpi= 80)

2.grid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2) #grid是一个二维列表

3.plt.hist()

4.sns.boxplot(）

5.c=df.manufacturer.astype('category').cat.codes #这是按类别编码的一种写法，之前用不同float
  colors = [plt.cm.tab10(i/float(len(categories)-1)) for i in range(len(categories))]


## o新知识点四 0809

1.df.corr()

2.sns.heatmap(df.corr())

3.sns.pairplot(df #数据，各个特征和标签, kind="scatter" #要绘制的图像类型
              , hue="species" #类别所在的列（标签）)

## o新知识点五 1011

1.plt.hlines()

2.df.cars.values

3.['green' if i>0 else 'red' for i in df['mpg_z']]

4.cluster = KMeans(n_clusters=2, random_state=0).fit(data_x)

## o新知识点六 1213

1.plt.gca().spines['right'].set_alpha(.3)

2.fig, ax = plt.subplots()

3.p = patches.Rectangle(）

4.plt.gca().add_patch(p1)

5.plt.annotate
函数功能：添加注释

6.plt.grid(linestyle='--', alpha=0.5)

## o新知识点七 14

1.plt.fill_between(x,y1,y2,color='r',alpha=.7);

2.df = pd.read_csv("data/economics.csv",parse_dates=['date'])

3.pd.to_datetime(df1.date)

4.df1['date2'] = df1['date'].apply(lambda x:datetime.datetime.strptime(x, "%Y-%m-%d"))

5.df.psavert.diff()

6.re = (income/df.psavert.shift(1)).fillna(0)*100  #shift(1)往后移一位

7.y = df.date.dt.year

8.m = df.date.dt.month_name()

## o新知识点八 151617

1.plt.vlines(): vertical line，就是绘制竖线的函数

2.df.manufacturer.str.title()  # .str 换成字符串


## o新知识点九 1819

1.l = mlines.Line2D([1,2,3] #所有希望链接的点的横坐标列表
                  ,[14,13,20] #所有希望链接的点的纵坐标列表)
                  
ax.add_line(l)

## o新知识点十 2021

1.plt.hist()

2.df0['displ'].values.tolist()

3.vals =[df0['displ'].values.tolist() for i,df0 in df_agg] # 重复displ值

4.plt.hist(vals,30,stacked=True);  # vals是二维连续变量列表，30个bins

5.[round(b,1) for b in bins[::3]]

## o新知识点十一 2229

1.sns.kdeplot()

2.sns.distplot()

## o新知识点十二 2425

1.joypy.joyplot()

2.df_raw['cyl_color'] = df_raw.cyl.map(cyl_colors)  # map()函数输出匹配结果

3.df_median = df_raw[['cty', 'manufacturer']].groupby('manufacturer').apply(lambda x: x.median())

4.np.repeat(0, df_make.shape[0]) #重复元素（把 0 重复df_make.shape[0]次）

## o新知识点十三 262728

## o新知识点十四 31323334

1.bbox_to_anchor

2.df_class.itertuples()每次打dataframe的一行<br>  zip(x,y)和c_(x,y)一一对应打包成元组、列表的可循环对象

3.plots = {"图像位置":{"每一个和华夫饼有关的参数":参数的值}}

4.autopct=lambda x: "{:.2f}% ({:d})".format(x,int(x/100.*np.sum(data)))

5.随机选颜色，从颜色库
